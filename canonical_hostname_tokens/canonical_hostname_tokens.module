<?php
/**
 * @file
 * Enables configuration of a canonical hostname to be used in tokens.
 */

/**
 * Implements hook_menu().
 */
function canonical_hostname_tokens_menu() {
  $items = array();
  $items['admin/config/system/canonical-hostname'] = array(
    'title' => 'Canonical hostname',
    'description' => 'Allows administration of canonical hostname tokens.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('canonical_hostname_tokens_admin_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'canonical_hostname_tokens.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_tokens_alter().
 */
function canonical_hostname_tokens_tokens_alter(array &$replacements, array $context) {
  static $token_names = array(
    'current-page:url',
    'current-page:url:absolute',
    'current-page:url:unaliased:absolute',

    'current-user:cancel-url',
    'current-user:edit-url',
    'current-user:one-time-login-url',
    'current-user:original:cancel-url',
    'current-user:original:edit-url',
    'current-user:original:one-time-login-url',
    'current-user:original:url',
    'current-user:original:url:absolute',
    'current-user:original:url:unaliased',
    'current-user:original:validate-url',
    'current-user:url',
    'current-user:url:absolute',
    'current-user:url:unaliased',
    'current-user:url:unaliased:absolute',
    'current-user:validate-url',

    'site:current-page:url',
    'site:current-user:cancel-url',
    'site:current-user:edit-url',
    'site:current-user:one-time-login-url',
    'site:current-user:original:cancel-url',
    'site:current-user:original:edit-url',
    'site:current-user:original:one-time-login-url',
    'site:current-user:original:url',
    'site:current-user:original:validate-url',
    'site:current-user:url',
    'site:current-user:url:absolute',
    'site:current-user:url:unaliased',
    'site:current-user:validate-url',
    'site:login-url',
    'site:url',

    'user:cancel-url',
    'user:edit-url',
    'user:one-time-login-url',
    'user:original:cancel-url',
    'user:original:edit-url',
    'user:original:one-time-login-url',
    'user:original:url',
    'user:original:url:absolute',
    'user:original:url:unaliased',
    'user:original:validate-url',
    'user:url',
    'user:url:absolute',
    'user:url:unaliased',
    'user:url:unaliased:absolute',
    'user:validate-url',
  );

  $hostname = variable_get('canonical_hostname_tokens_hostname', NULL);
  if (empty($hostname)) {
    return;
  }
  $enforce_https = variable_get('canonical_hostname_tokens_enforce_https', FALSE);

  foreach ($token_names as $token_name) {
    $token_name = '[' . $token_name . ']';
    if (array_key_exists($token_name, $replacements) && !empty($replacements[$token_name])) {
      $new_url = _canonical_hostname_tokens_alter_url($replacements[$token_name], $hostname, $enforce_https);
      if ($new_url !== FALSE) {
        $replacements[$token_name] = $new_url;
      }
    }
  }
}

/**
 * Implements hook_mail_alter().
 *
 * Since user:one-time-login-url and user:cancel-url are implemented in an
 * un-alterable way, we brute-force mail messages to comply.
 */
function canonical_hostname_tokens_mail_alter(&$message) {
  $hostname = variable_get('canonical_hostname_tokens_hostname', NULL);
  if (empty($hostname)) {
    return;
  }
  $enforce_https = variable_get('canonical_hostname_tokens_enforce_https', FALSE);

  $body =& $message['body'][0];
  $patterns = array(
    '!https?://[A-Za-z0-9.-]+(:[0-9]+)?/user/reset/[0-9]+/[0-9]+/[A-Za-z0-9_-]+!',
    '!https?://[A-Za-z0-9.-]+(:[0-9]+)?/user/[0-9]+/cancel/confirm/[0-9]+/[A-Za-z0-9_-]+!',
  );

  foreach ($patterns as $pattern) {
    if (preg_match_all($pattern, $body, $matches, PREG_SET_ORDER)) {
      foreach ($matches as $match) {
        $new_url = _canonical_hostname_tokens_alter_url($match[0], $hostname, $enforce_https);
        if ($new_url) {
          $body = str_replace($match[0], $new_url, $body);
        }
      }
    }
  }
}

/**
 * Returns a URL with the hostname altered, or FALSE if no change is possible.
 *
 * @param string $url
 *   The URL to be altered.
 * @param string $hostname
 *   The hostname to be replaced into the URL.
 * @param bool $enforce_https
 *   If TRUE, force new URL to be served via https.
 *
 * @return bool|string
 *   The rewritten URL, or FALSE if the URL could not be adequately parsed.
 */
function _canonical_hostname_tokens_alter_url($url, $hostname, $enforce_https) {
  $parts = parse_url($url);
  if (empty($parts) || empty($parts['host'])) {
    return FALSE;
  }
  $parts['host'] = $hostname;
  if ($enforce_https) {
    $parts['scheme'] = 'https';
  }

  if (!isset($parts['scheme'])) {
    $parts['scheme'] = isset($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) == 'on' ? 'https' : 'http';
  }
  $url = $parts['scheme'] . '://' . $parts['host'];
  if (!empty($parts['port'])) {
    if (($parts['scheme'] == 'http' && $parts['port'] != 80) || ($parts['scheme'] == 'https' && $parts['port'] != 443)) {
      $url .= ':' . $parts['port'];
    }
  }
  if (!empty($parts['path'])) {
    $url .= $parts['path'];
  }
  if (!empty($parts['query'])) {
    $url .= '?' . $parts['query'];
  }
  if (!empty($parts['fragment'])) {
    $url .= '#' . $parts['fragment'];
  }
  return $url;
}
